/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    List<Integer> result = new ArrayList<Integer>();
    public List<Integer> preorderTraversal(TreeNode root) {
        if(root!=null){
            result.add(root.val);
            preorderTraversal(root.left);
            preorderTraversal(root.right);
        }
        return result;
    }
    
public List<Integer> preorderTraversalwithoutRecrusion (TreeNode root){
  List<Integer> result = new ArrayList<Integer>();
  Stack<TreeNode> stack = new Stack<TreeNode>();
  while(root!=null||!stack.empty()){
    while(root!=null){
      result.add(root.val);
      stack.add(root);
      root=root.left;
    }
    root=stack.pop();
    root=root.right;
  }
  return result;
  
}
    
    
    
    
}
