public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
    	if(matrix==null) return null;
    	List<Integer> result = new ArrayList<Integer>();
    	if(matrix.length==0) return result;
    	int row=matrix.length;
    	int colume=matrix[0].length;
    	int passed=0;
    	int[][] lable = new int[row][colume];

    	boolean goright=true;
    	boolean godown=false;
    	boolean goleft=false;
    	boolean goup=false;


    	int i=0;
    	int j=0;

        while(passed<row*colume){



        while(goright==true&&passed<row*colume){
        		result.add(matrix[i][j]);
        		passed++;
        		lable[i][j]=1;
        		j++;
        		if(j==colume||lable[i][j]==1){
        			goright=false;
        			godown=true;
        			j--;
        			i++;
        		}

        	}

        while(godown==true&&passed<row*colume){
        	result.add(matrix[i][j]);
        	passed++;
        	lable[i][j]=1;
        	i++;
        	if(i==row||lable[i][j]==1){
        		godown=false;
        		goleft=true;
        		i--;
        		j--;
        	}

        }

        while(goleft==true&&passed<row*colume){
        	result.add(matrix[i][j]);
        	passed++;
        	lable[i][j]=1;
        	j--;
        	if(j==-1||lable[i][j]==1){
        		goleft=false;
        		goup=true;
        		i--;
        		j++;
        	}

        }

        while(goup==true&&passed<row*colume){
        	result.add(matrix[i][j]);
        	passed++;
        	lable[i][j]=1;
        	i--;
        	if(i==-1||lable[i][j]==1){
        		goup=false;
        		goright=true;
        		i++;
        		j++;
        	}

        }

        }
        return result;
    }
    
    
    public List<Integer> spiralOrder2(int[][] matrix) {

        List<Integer> res = new ArrayList<Integer>();

        if (matrix.length == 0) {
            return res;
        }

        int rowBegin = 0;
        int rowEnd = matrix.length-1;
        int colBegin = 0;
        int colEnd = matrix[0].length - 1;

        while (rowBegin <= rowEnd && colBegin <= colEnd) {
            // Traverse Right
            for (int j = colBegin; j <= colEnd; j ++) {
                res.add(matrix[rowBegin][j]);
            }
            rowBegin++;

            // Traverse Down
            for (int j = rowBegin; j <= rowEnd; j ++) {
                res.add(matrix[j][colEnd]);
            }
            colEnd--;

            if (rowBegin <= rowEnd) {
                // Traverse Left
                for (int j = colEnd; j >= colBegin; j --) {
                    res.add(matrix[rowEnd][j]);
                }
            }
            rowEnd--;

            if (colBegin <= colEnd) {
                // Traver Up
                for (int j = rowEnd; j >= rowBegin; j --) {
                    res.add(matrix[j][colBegin]);
                }
            }
            colBegin ++;
        }

        return res;
    }
    
    
    
}
