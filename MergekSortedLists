/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode mergeKLists(List<ListNode> lists) {
        int length=lists.size();
        if(length==0) return null;
        if(length==1) return lists.get(0);
        int mid=(length-1)/2;
        ListNode l1=mergeKLists(lists.subList(0,mid+1));
        ListNode l2=mergeKLists(lists.subList(mid+1,length));
        return mergeTwoLists(l1,l2);
        
    }
    public ListNode mergeTwoLists(ListNode l1,ListNode l2){
        ListNode result=new ListNode(0);
        ListNode temp=result;
        ListNode listone=l1;
        ListNode listtwo=l2;
        while(listone!=null&&listtwo!=null){
            if(listone.val<=listtwo.val){
                temp.next=listone;
                listone=listone.next;
                temp=temp.next;
            }else{
                temp.next=listtwo;
                listtwo=listtwo.next;
                temp=temp.next;
            }
        }
        while(listone!=null){
            temp.next=listone;
            listone=listone.next;
            temp=temp.next;
        }
        while(listtwo!=null){
            temp.next=listtwo;
            listtwo=listtwo.next;
            temp=temp.next;
        }
        return result.next;
    }
    
    
    
    
    
    
    
        public ListNode mergeKLists2(List<ListNode> lists) {
       if(lists.size()==0) return null;
       ListNode dummy = new ListNode(0);
       ListNode tail=dummy;
       PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(lists.size(),new Comparator<ListNode>(){
           public int compare(ListNode l1, ListNode l2){
               if(l1.val<l2.val) return -1;
               else if(l1.val>l2.val) return 1;
               else return 0;
           }
       });
       for (int i=0;i<lists.size();i++){
           if(lists.get(i)!=null)
           queue.add(lists.get(i));
       }
       while(!queue.isEmpty()){
           tail.next=queue.poll();
           tail=tail.next;
           if(tail.next!=null)
           queue.add(tail.next);
       }
       return dummy.next;
        
    }
    
}
