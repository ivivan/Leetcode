/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals==null) return null;
        if(intervals.size()==1||intervals.size()==0) return intervals;
        List<Interval> result= new ArrayList<Interval>();
        Collections.sort(intervals,new Comparator<Interval>(){
            public int compare(Interval a,Interval b){
                if(a.start<b.start) return -1;
                else if(a.start==b.start){
                    if(a.end<b.end) return -1;
                    else if(a.end==b.end) return 0;
                    else return 1;
                }
                else return 1;
            }
        });
        int astart=intervals.get(0).start;
        int aend=intervals.get(0).end;
        int i=1;
        while(i<intervals.size()){
            int bstart=intervals.get(i).start;
            int bend=intervals.get(i).end;
            if(aend<bstart){
                result.add(new Interval(astart,aend));
                astart=bstart;
                aend=bend;
            }else if(aend==bstart){
                aend=bend;
            }else if(aend<bend){
                aend=bend;
            }
            i++;
        }
        result.add(new Interval(astart,aend));
        return result;
    }
}
